name: Publish Packages

on:
  push:
    branches:
      - develop
    paths:
      - 'plugins/**/package.json'    # Any package.json inside the plugins folder
      - 'plugins/**/src/**'          # Any file inside the src folder in the plugins folder

env: 
    NODE_VERSION: 18.x

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Install semver
        run: npm install -g semver

      # Loop through the files you want to check/publish
      - name: Check and Publish file 1
        id: file1
        run: |
          PACKAGE_NAME="@kubernetes-administration/file1"
          NEW_VERSION=$(jq -r '.version' plugins/file1/package.json)  # Extract version from package.json
          
          # Get the existing version from the registry
          EXISTING_VERSION=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration version 2>/dev/null)
          
          # Check if the version exists and if the new version is greater
          if [ -z "$EXISTING_VERSION" ] || semver -r ">$EXISTING_VERSION" "$NEW_VERSION"; then
            echo "New version ($NEW_VERSION) is greater than the existing version ($EXISTING_VERSION), or package does not exist. Proceeding to publish."
            echo "::set-output name=publish::true"
          else
            echo "New version ($NEW_VERSION) is not greater than the existing version ($EXISTING_VERSION). Skipping publish."
            echo "::set-output name=publish::false"
          fi

      # Repeat the process for file2, file3, and file4 (same logic for each file)
      - name: Check and Publish file 2
        id: file2
        run: |
          PACKAGE_NAME="@kubernetes-administration/file2"
          NEW_VERSION=$(jq -r '.version' plugins/file2/package.json)  # Extract version from package.json
          
          # Get the existing version from the registry
          EXISTING_VERSION=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration version 2>/dev/null)
          
          # Check if the version exists and if the new version is greater
          if [ -z "$EXISTING_VERSION" ] || semver -r ">$EXISTING_VERSION" "$NEW_VERSION"; then
            echo "New version ($NEW_VERSION) is greater than the existing version ($EXISTING_VERSION), or package does not exist. Proceeding to publish."
            echo "::set-output name=publish::true"
          else
            echo "New version ($NEW_VERSION) is not greater than the existing version ($EXISTING_VERSION). Skipping publish."
            echo "::set-output name=publish::false"
          fi

      - name: Check and Publish file 3
        id: file3
        run: |
          PACKAGE_NAME="@kubernetes-administration/file3"
          NEW_VERSION=$(jq -r '.version' plugins/file3/package.json)  # Extract version from package.json
          
          # Get the existing version from the registry
          EXISTING_VERSION=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration version 2>/dev/null)
          
          # Check if the version exists and if the new version is greater
          if [ -z "$EXISTING_VERSION" ] || semver -r ">$EXISTING_VERSION" "$NEW_VERSION"; then
            echo "New version ($NEW_VERSION) is greater than the existing version ($EXISTING_VERSION), or package does not exist. Proceeding to publish."
            echo "::set-output name=publish::true"
          else
            echo "New version ($NEW_VERSION) is not greater than the existing version ($EXISTING_VERSION). Skipping publish."
            echo "::set-output name=publish::false"
          fi

      - name: Check and Publish file 4
        id: file4
        run: |
          PACKAGE_NAME="@kubernetes-administration/file4"
          NEW_VERSION=$(jq -r '.version' plugins/file4/package.json)  # Extract version from package.json
          
          # Get the existing version from the registry
          EXISTING_VERSION=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration version 2>/dev/null)
          
          # Check if the version exists and if the new version is greater
          if [ -z "$EXISTING_VERSION" ] || semver -r ">$EXISTING_VERSION" "$NEW_VERSION"; then
            echo "New version ($NEW_VERSION) is greater than the existing version ($EXISTING_VERSION), or package does not exist. Proceeding to publish."
            echo "::set-output name=publish::true"
          else
            echo "New version ($NEW_VERSION) is not greater than the existing version ($EXISTING_VERSION). Skipping publish."
            echo "::set-output name=publish::false"
          fi

      # Publish the packages if the output is 'true' from previous steps
      - name: Publish file 1
        if: steps.file1.outputs.publish == 'true'
        run: npm publish plugins/file1/ --registry=https://npm.pkg.github.com/Kubernetes-administration

      - name: Publish file 2
        if: steps.file2.outputs.publish == 'true'
        run: npm publish plugins/file2/ --registry=https://npm.pkg.github.com/Kubernetes-administration

      - name: Publish file 3
        if: steps.file3.outputs.publish == 'true'
        run: npm publish plugins/file3/ --registry=https://npm.pkg.github.com/Kubernetes-administration

      - name: Publish file 4
        if: steps.file4.outputs.publish == 'true'
        run: npm publish plugins/file4/ --registry=https://npm.pkg.github.com/Kubernetes-administration