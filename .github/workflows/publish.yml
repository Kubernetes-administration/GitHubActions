name: publish
on:
  push:
    branches:
      - develop
    paths:
      - 'plugins/**/package.json'    # Any package.json inside the plugins folder
      - 'plugins/**/src/**'          # Any file inside the src folder in the plugins folder

env: 
    NODE_VERSION: 18.x

jobs:
#   publish:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write
#     steps:
#       - uses: actions/checkout@v4
       
#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
#           cache: yarn

#       - name: Install yarn 2
#         run: npm install -g yarn@berry

#       - name: Set npm token for GitHub registry
#         run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> ~/.npmrc

#       # Get the current version from package.json
#       - name: Get current version
#         id: version
#         run: |
#           VERSION=$(node -p "require('./plugins/file1/package.json').version")
#           echo "Current version is $VERSION"
#           echo "::set-output name=version::$VERSION"

#       # Check if the version already exists on GitHub registry
#       - name: Check if version exists
#         id: check_version
#         run: |
#           VERSION=${{ steps.version.outputs.version }}
#           echo "Checking if version $VERSION exists in the GitHub registry..."
#           RESPONSE=$(npm info @kubernetes-administration/file1@$VERSION --registry=https://npm.pkg.github.com/Kubernetes-administration)
#           if [[ $RESPONSE == *"404 Not Found"* ]]; then
#             echo "Version $VERSION not found. Proceeding to publish."
#             echo "::set-output name=exists::false"
#           else
#             echo "Version $VERSION already exists. Skipping publish."
#             echo "::set-output name=exists::true"
#           fi

#       # Conditionally publish if the version does not exist
#       - name: Publish file 1
#         if: steps.check_version.outputs.exists == 'false'
#         run: |
#           echo "Publishing file 1 version ${{ steps.version.outputs.version }}..."
#           npm publish plugins/file1/ --registry=https://npm.pkg.github.com/Kubernetes-administration

#       # Repeat for other files if needed
#       - name: Publish file 2
#         if: steps.check_version.outputs.exists == 'false'
#         run: |
#           echo "Publishing file 2 version ${{ steps.version.outputs.version }}..."
#           npm publish plugins/file2/ --registry=https://npm.pkg.github.com/Kubernetes-administration

#       - name: Publish file 3
#         if: steps.check_version.outputs.exists == 'false'
#         run: |
#           echo "Publishing file 3 version ${{ steps.version.outputs.version }}..."
#           npm publish plugins/file3/ --registry=https://npm.pkg.github.com/Kubernetes-administration

#       - name: Publish file 4
#         if: steps.check_version.outputs.exists == 'false'
#         run: |
#           echo "Publishing file 4 version ${{ steps.version.outputs.version }}..."
#           npm publish plugins/file4/ --registry=https://npm.pkg.github.com/Kubernetes-administration

# jobs:
#   publish:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write
#     steps:
#       - uses: actions/checkout@v4
       
#       - name: Set up Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
#           cache: yarn

#       - name: Install yarn 2
#         run: npm install -g yarn@berry

#       - name: Set npm token for GitHub registry
#         run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> ~/.npmrc

#       # Get the current version from package.json
#       - name: Get current version
#         id: version
#         run: |
#           VERSION=$(node -p "require('./plugins/file1/package.json').version")
#           echo "Current version is $VERSION"
#           echo "::set-output name=version::$VERSION"

#       # Check if the version already exists on GitHub registry
#       - name: Check if version exists
#         id: check_version
#         run: |
#           VERSION=${{ steps.version.outputs.version }}
#           echo "Checking if version $VERSION exists in the GitHub registry..."
#           RESPONSE=$(npm info @kubernetes-administration/file1@$VERSION --registry=https://npm.pkg.github.com/Kubernetes-administration)
#           if [[ $RESPONSE == *"404 Not Found"* ]]; then
#             echo "Version $VERSION not found. Proceeding to publish."
#             echo "::set-output name=exists::false"
#           else
#             echo "Version $VERSION already exists. Skipping publish."
#             echo "::set-output name=exists::true"
#           fi

#       # Publish the package if the version does not exist
#       - name: Publish file 1
#         if: steps.check_version.outputs.exists == 'false'
#         run: |
#           echo "Publishing file 1 version ${{ steps.version.outputs.version }}..."
#           npm publish plugins/file1/ --registry=https://npm.pkg.github.com/Kubernetes-administration

#       # Repeat the above steps for other files
#       - name: Publish file 2
#         if: steps.check_version.outputs.exists == 'false'
#         run: |
#           echo "Publishing file 2 version ${{ steps.version.outputs.version }}..."
#           npm publish plugins/file2/ --registry=https://npm.pkg.github.com/Kubernetes-administration

#       - name: Publish file 3
#         if: steps.check_version.outputs.exists == 'false'
#         run: |
#           echo "Publishing file 3 version ${{ steps.version.outputs.version }}..."
#           npm publish plugins/file3/ --registry=https://npm.pkg.github.com/Kubernetes-administration

#       - name: Publish file 4
#         if: steps.check_version.outputs.exists == 'false'
#         run: |
#           echo "Publishing file 4 version ${{ steps.version.outputs.version }}..."
#           npm publish plugins/file4/ --registry=https://npm.pkg.github.com/Kubernetes-administration

# jobs:
  # publish:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - uses: actions/checkout@v4
       
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: yarn

  #     - name: Install yarn 2
  #       run: npm install -g yarn@berry

  #     - name: Set npm token for GitHub registry
  #       run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> ~/.npmrc

  #     # Get the current version from package.json (for file1)
  #     - name: Get current version for file1
  #       id: version1
  #       run: |
  #         VERSION=$(node -p "require('./plugins/file1/package.json').version")
  #         echo "Current version for file1 is $VERSION"
  #         echo "::set-output name=version::$VERSION"

  #     # Check if file1 exists
  #     - name: Check if file1 exists
  #       id: check_file1
  #       run: |
  #         PACKAGE_NAME="@kubernetes-administration/file1"
  #         RESPONSE=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration)
  #         if [[ $RESPONSE == *"404 Not Found"* ]]; then
  #           echo "Package $PACKAGE_NAME not found. Proceeding to publish."
  #           echo "::set-output name=exists::false"
  #         else
  #           echo "Package $PACKAGE_NAME already exists. Skipping publish."
  #           echo "::set-output name=exists::true"
  #         fi

  #     # Publish file1 if it doesn't exist
  #     - name: Publish file1
  #       if: steps.check_file1.outputs.exists == 'false'
  #       run: |
  #         echo "Publishing file1 version ${{ steps.version1.outputs.version }}..."
  #         npm publish plugins/file1/ --registry=https://npm.pkg.github.com/Kubernetes-administration

  #     # Get the current version from package.json (for file2)
  #     - name: Get current version for file2
  #       id: version2
  #       run: |
  #         VERSION=$(node -p "require('./plugins/file2/package.json').version")
  #         echo "Current version for file2 is $VERSION"
  #         echo "::set-output name=version::$VERSION"

  #     # Check if file2 exists
  #     - name: Check if file2 exists
  #       id: check_file2
  #       run: |
  #         PACKAGE_NAME="@kubernetes-administration/file2"
  #         RESPONSE=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration)
  #         if [[ $RESPONSE == *"404 Not Found"* ]]; then
  #           echo "Package $PACKAGE_NAME not found. Proceeding to publish."
  #           echo "::set-output name=exists::false"
  #         else
  #           echo "Package $PACKAGE_NAME already exists. Skipping publish."
  #           echo "::set-output name=exists::true"
  #         fi

  #     # Publish file2 if it doesn't exist
  #     - name: Publish file2
  #       if: steps.check_file2.outputs.exists == 'false'
  #       run: |
  #         echo "Publishing file2 version ${{ steps.version2.outputs.version }}..."
  #         npm publish plugins/file2/ --registry=https://npm.pkg.github.com/Kubernetes-administration

  #     # Get the current version from package.json (for file3)
  #     - name: Get current version for file3
  #       id: version3
  #       run: |
  #         VERSION=$(node -p "require('./plugins/file3/package.json').version")
  #         echo "Current version for file3 is $VERSION"
  #         echo "::set-output name=version::$VERSION"

  #     # Check if file3 exists
  #     - name: Check if file3 exists
  #       id: check_file3
  #       run: |
  #         PACKAGE_NAME="@kubernetes-administration/file3"
  #         RESPONSE=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration)
  #         if [[ $RESPONSE == *"404 Not Found"* ]]; then
  #           echo "Package $PACKAGE_NAME not found. Proceeding to publish."
  #           echo "::set-output name=exists::false"
  #         else
  #           echo "Package $PACKAGE_NAME already exists. Skipping publish."
  #           echo "::set-output name=exists::true"
  #         fi

  #     # Publish file3 if it doesn't exist
  #     - name: Publish file3
  #       if: steps.check_file3.outputs.exists == 'false'
  #       run: |
  #         echo "Publishing file3 version ${{ steps.version3.outputs.version }}..."
  #         npm publish plugins/file3/ --registry=https://npm.pkg.github.com/Kubernetes-administration

  #     # Get the current version from package.json (for file4)
  #     - name: Get current version for file4
  #       id: version4
  #       run: |
  #         VERSION=$(node -p "require('./plugins/file4/package.json').version")
  #         echo "Current version for file4 is $VERSION"
  #         echo "::set-output name=version::$VERSION"

  #     # Check if file4 exists
  #     - name: Check if file4 exists
  #       id: check_file4
  #       run: |
  #         PACKAGE_NAME="@kubernetes-administration/file4"
  #         RESPONSE=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration)
  #         if [[ $RESPONSE == *"404 Not Found"* ]]; then
  #           echo "Package $PACKAGE_NAME not found. Proceeding to publish."
  #           echo "::set-output name=exists::false"
  #         else
  #           echo "Package $PACKAGE_NAME already exists. Skipping publish."
  #           echo "::set-output name=exists::true"
  #         fi

  #     # Publish file4 if it doesn't exist
  #     - name: Publish file4
  #       if: steps.check_file4.outputs.exists == 'false'
  #       run: |
  #         echo "Publishing file4 version ${{ steps.version4.outputs.version }}..."
  #         npm publish plugins/file4/ --registry=https://npm.pkg.github.com/Kubernetes-administration


  # publish:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   steps:
  #     - uses: actions/checkout@v4
       
  #     - name: Set up Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: yarn

  #     - name: Install yarn 2
  #       run: npm install -g yarn@berry

  #     - name: Set npm token for GitHub registry
  #       run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> ~/.npmrc

  #     # Get the current version from package.json (for file1)
  #     - name: Get current version for file1
  #       id: version1
  #       run: |
  #         VERSION=$(node -p "require('./plugins/file1/package.json').version")
  #         echo "Current version for file1 is $VERSION"
  #         echo "::set-output name=version::$VERSION"

  #     # Check if file1 exists and compare versions
  #     - name: Check if file1 exists and compare versions
  #       id: check_file1
  #       run: |
  #         PACKAGE_NAME="@kubernetes-administration/file1"
  #         NEW_VERSION=${{ steps.version1.outputs.version }}
          
  #         # Get the existing version from the registry
  #         EXISTING_VERSION=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration version 2>/dev/null)

  #         if [ -z "$EXISTING_VERSION" ]; then
  #           echo "Package $PACKAGE_NAME does not exist in the registry. Proceeding to publish."
  #           echo "::set-output name=publish::true"
  #         elif [ "$(semver $NEW_VERSION -gt $EXISTING_VERSION)" == "true" ]; then
  #           echo "New version ($NEW_VERSION) is greater than the existing version ($EXISTING_VERSION). Proceeding to publish."
  #           echo "::set-output name=publish::true"
  #         else
  #           echo "New version ($NEW_VERSION) is not greater than the existing version ($EXISTING_VERSION). Skipping publish."
  #           echo "::set-output name=publish::false"
  #         fi

  #     # Publish file1 if necessary
  #     - name: Publish file1
  #       if: steps.check_file1.outputs.publish == 'true'
  #       run: |
  #         echo "Publishing file1 version ${{ steps.version1.outputs.version }}..."
  #         npm publish plugins/file1/ --registry=https://npm.pkg.github.com/Kubernetes-administration

  #     # Get the current version from package.json (for file2)
  #     - name: Get current version for file2
  #       id: version2
  #       run: |
  #         VERSION=$(node -p "require('./plugins/file2/package.json').version")
  #         echo "Current version for file2 is $VERSION"
  #         echo "::set-output name=version::$VERSION"

  #     # Check if file2 exists and compare versions
  #     - name: Check if file2 exists and compare versions
  #       id: check_file2
  #       run: |
  #         PACKAGE_NAME="@kubernetes-administration/file2"
  #         NEW_VERSION=${{ steps.version2.outputs.version }}
          
  #         # Get the existing version from the registry
  #         EXISTING_VERSION=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration version 2>/dev/null)

  #         if [ -z "$EXISTING_VERSION" ]; then
  #           echo "Package $PACKAGE_NAME does not exist in the registry. Proceeding to publish."
  #           echo "::set-output name=publish::true"
  #         elif [ "$(semver $NEW_VERSION -gt $EXISTING_VERSION)" == "true" ]; then
  #           echo "New version ($NEW_VERSION) is greater than the existing version ($EXISTING_VERSION). Proceeding to publish."
  #           echo "::set-output name=publish::true"
  #         else
  #           echo "New version ($NEW_VERSION) is not greater than the existing version ($EXISTING_VERSION). Skipping publish."
  #           echo "::set-output name=publish::false"
  #         fi

  #     # Publish file2 if necessary
  #     - name: Publish file2
  #       if: steps.check_file2.outputs.publish == 'true'
  #       run: |
  #         echo "Publishing file2 version ${{ steps.version2.outputs.version }}..."
  #         npm publish plugins/file2/ --registry=https://npm.pkg.github.com/Kubernetes-administration

  #     # Get the current version from package.json (for file3)
  #     - name: Get current version for file3
  #       id: version3
  #       run: |
  #         VERSION=$(node -p "require('./plugins/file3/package.json').version")
  #         echo "Current version for file3 is $VERSION"
  #         echo "::set-output name=version::$VERSION"

  #     # Check if file3 exists and compare versions
  #     - name: Check if file3 exists and compare versions
  #       id: check_file3
  #       run: |
  #         PACKAGE_NAME="@kubernetes-administration/file3"
  #         NEW_VERSION=${{ steps.version3.outputs.version }}
          
  #         # Get the existing version from the registry
  #         EXISTING_VERSION=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration version 2>/dev/null)

  #         if [ -z "$EXISTING_VERSION" ]; then
  #           echo "Package $PACKAGE_NAME does not exist in the registry. Proceeding to publish."
  #           echo "::set-output name=publish::true"
  #         elif [ "$(semver $NEW_VERSION -gt $EXISTING_VERSION)" == "true" ]; then
  #           echo "New version ($NEW_VERSION) is greater than the existing version ($EXISTING_VERSION). Proceeding to publish."
  #           echo "::set-output name=publish::true"
  #         else
  #           echo "New version ($NEW_VERSION) is not greater than the existing version ($EXISTING_VERSION). Skipping publish."
  #           echo "::set-output name=publish::false"
  #         fi

  #     # Publish file3 if necessary
  #     - name: Publish file3
  #       if: steps.check_file3.outputs.publish == 'true'
  #       run: |
  #         echo "Publishing file3 version ${{ steps.version3.outputs.version }}..."
  #         npm publish plugins/file3/ --registry=https://npm.pkg.github.com/Kubernetes-administration

  #     # Get the current version from package.json (for file4)
  #     - name: Get current version for file4
  #       id: version4
  #       run: |
  #         VERSION=$(node -p "require('./plugins/file4/package.json').version")
  #         echo "Current version for file4 is $VERSION"
  #         echo "::set-output name=version::$VERSION"

  #     # Check if file4 exists and compare versions
  #     - name: Check if file4 exists and compare versions
  #       id: check_file4
  #       run: |
  #         PACKAGE_NAME="@kubernetes-administration/file4"
  #         NEW_VERSION=${{ steps.version4.outputs.version }}
          
  #         # Get the existing version from the registry
  #         EXISTING_VERSION=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration version 2>/dev/null)

  #         if [ -z "$EXISTING_VERSION" ]; then
  #           echo "Package $PACKAGE_NAME does not exist in the registry. Proceeding to publish."
  #           echo "::set-output name=publish::true"
  #         elif [ "$(semver $NEW_VERSION -gt $EXISTING_VERSION)" == "true" ]; then
  #           echo "New version ($NEW_VERSION) is greater than the existing version ($EXISTING_VERSION). Proceeding to publish."
  #           echo "::set-output name=publish::true"
  #         else
  #           echo "New version ($NEW_VERSION) is not greater than the existing version ($EXISTING_VERSION). Skipping publish."
  #           echo "::set-output name=publish::false"
  #         fi

  #     # Publish file4 if necessary
  #     - name: Publish file4
  #       if: steps.check_file4.outputs.publish == 'true'
  #       run: |
  #         echo "Publishing file4 version ${{ steps.version4.outputs.version }}..."
  #         npm publish plugins/file4/ --registry=https://npm.pkg.github.com/Kubernetes-administration


  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: yarn

      - name: Install yarn 2
        run: npm install -g yarn@berry

      - name: Set npm token for GitHub registry
        run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> ~/.npmrc

      # Get the current version from package.json (for file1)
      - name: Get current version for file1
        id: version1
        run: |
          VERSION=$(node -p "require('./plugins/file1/package.json').version")
          echo "Current version for file1 is $VERSION"
          echo "::set-output name=version::$VERSION"

      # Check if file1 exists and compare versions
      - name: Check if file1 exists and compare versions
        id: check_file1
        run: |
          PACKAGE_NAME="@kubernetes-administration/file1"
          NEW_VERSION=${{ steps.version1.outputs.version }}
          
          # Get the existing version from the registry
          EXISTING_VERSION=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration version 2>/dev/null)

          if [ -z "$EXISTING_VERSION" ]; then
            echo "Package $PACKAGE_NAME does not exist in the registry. Proceeding to publish."
            echo "::set-output name=publish::true"
          elif [ "$(semver $NEW_VERSION -gt $EXISTING_VERSION)" == "true" ]; then
            echo "New version ($NEW_VERSION) is greater than the existing version ($EXISTING_VERSION). Proceeding to publish."
            echo "::set-output name=publish::true"
          else
            echo "New version ($NEW_VERSION) is not greater than the existing version ($EXISTING_VERSION). Skipping publish."
            echo "::set-output name=publish::false"
          fi

      # Publish file1 if necessary
      - name: Publish file1
        if: steps.check_file1.outputs.publish == 'true'
        run: |
          echo "Publishing file1 version ${{ steps.version1.outputs.version }}..."
          npm publish plugins/file1/ --registry=https://npm.pkg.github.com/Kubernetes-administration

      # Get the current version from package.json (for file2)
      - name: Get current version for file2
        id: version2
        run: |
          VERSION=$(node -p "require('./plugins/file2/package.json').version")
          echo "Current version for file2 is $VERSION"
          echo "::set-output name=version::$VERSION"

      # Check if file2 exists and compare versions
      - name: Check if file2 exists and compare versions
        id: check_file2
        run: |
          PACKAGE_NAME="@kubernetes-administration/file2"
          NEW_VERSION=${{ steps.version2.outputs.version }}
          
          # Get the existing version from the registry
          EXISTING_VERSION=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration version 2>/dev/null)

          if [ -z "$EXISTING_VERSION" ]; then
            echo "Package $PACKAGE_NAME does not exist in the registry. Proceeding to publish."
            echo "::set-output name=publish::true"
          elif [ "$(semver $NEW_VERSION -gt $EXISTING_VERSION)" == "true" ]; then
            echo "New version ($NEW_VERSION) is greater than the existing version ($EXISTING_VERSION). Proceeding to publish."
            echo "::set-output name=publish::true"
          else
            echo "New version ($NEW_VERSION) is not greater than the existing version ($EXISTING_VERSION). Skipping publish."
            echo "::set-output name=publish::false"
          fi

      # Publish file2 if necessary
      - name: Publish file2
        if: steps.check_file2.outputs.publish == 'true'
        run: |
          echo "Publishing file2 version ${{ steps.version2.outputs.version }}..."
          npm publish plugins/file2/ --registry=https://npm.pkg.github.com/Kubernetes-administration

      # Get the current version from package.json (for file3)
      - name: Get current version for file3
        id: version3
        run: |
          VERSION=$(node -p "require('./plugins/file3/package.json').version")
          echo "Current version for file3 is $VERSION"
          echo "::set-output name=version::$VERSION"

      # Check if file3 exists and compare versions
      - name: Check if file3 exists and compare versions
        id: check_file3
        run: |
          PACKAGE_NAME="@kubernetes-administration/file3"
          NEW_VERSION=${{ steps.version3.outputs.version }}
          
          # Get the existing version from the registry
          EXISTING_VERSION=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration version 2>/dev/null)

          if [ -z "$EXISTING_VERSION" ]; then
            echo "Package $PACKAGE_NAME does not exist in the registry. Proceeding to publish."
            echo "::set-output name=publish::true"
          elif [ "$(semver $NEW_VERSION -gt $EXISTING_VERSION)" == "true" ]; then
            echo "New version ($NEW_VERSION) is greater than the existing version ($EXISTING_VERSION). Proceeding to publish."
            echo "::set-output name=publish::true"
          else
            echo "New version ($NEW_VERSION) is not greater than the existing version ($EXISTING_VERSION). Skipping publish."
            echo "::set-output name=publish::false"
          fi

      # Publish file3 if necessary
      - name: Publish file3
        if: steps.check_file3.outputs.publish == 'true'
        run: |
          echo "Publishing file3 version ${{ steps.version3.outputs.version }}..."
          npm publish plugins/file3/ --registry=https://npm.pkg.github.com/Kubernetes-administration

      # Get the current version from package.json (for file4)
      - name: Get current version for file4
        id: version4
        run: |
          VERSION=$(node -p "require('./plugins/file4/package.json').version")
          echo "Current version for file4 is $VERSION"
          echo "::set-output name=version::$VERSION"

      # Check if file4 exists and compare versions
      - name: Check if file4 exists and compare versions
        id: check_file4
        run: |
          PACKAGE_NAME="@kubernetes-administration/file4"
          NEW_VERSION=${{ steps.version4.outputs.version }}
          
          # Get the existing version from the registry
          EXISTING_VERSION=$(npm info $PACKAGE_NAME --registry=https://npm.pkg.github.com/Kubernetes-administration version 2>/dev/null)

          if [ -z "$EXISTING_VERSION" ]; then
            echo "Package $PACKAGE_NAME does not exist in the registry. Proceeding to publish."
            echo "::set-output name=publish::true"
          elif [ "$(semver $NEW_VERSION -gt $EXISTING_VERSION)" == "true" ]; then
            echo "New version ($NEW_VERSION) is greater than the existing version ($EXISTING_VERSION). Proceeding to publish."
            echo "::set-output name=publish::true"
          else
            echo "New version ($NEW_VERSION) is not greater than the existing version ($EXISTING_VERSION). Skipping publish."
            echo "::set-output name=publish::false"
          fi

      # Publish file4 if necessary
      - name: Publish file4
        if: steps.check_file4.outputs.publish == 'true'
        run: |
          echo "Publishing file4 version ${{ steps.version4.outputs.version }}..."
          npm publish plugins/file4/ --registry=https://npm.pkg.github.com/Kubernetes-administration


  # publish:
  #   runs-on: ubuntu-latest
  #   permissions:
  #       contents: read
  #       packages: write
  #   steps:
  #       - uses: actions/checkout@v4
    
  #       - name: Use Node.js ${{ env.NODE_VERSION }}
  #         uses: actions/setup-node@v4
  #         with:
  #           node-version: ${{ env.NODE_VERSION }}
  #           cache: yarn

  #       - name: Install yarn 2
  #         run: npm install -g yarn@berry
  #       # Step 5: Set npm token
  #       - name: Set npm token for npmjs registry
  #         run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> ~/.npmrc

  #       # Step 5.1: Set GitHub npm token (for GitHub Packages)
  #       - name: Set GitHub npm token for GitHub registry
  #         run: echo "//npm.pkg.github.com/:_authToken=${{ secrets.GH_TOKEN }}" >> ~/.npmrc

  #       - name: Publish file 1
  #         run: npm publish plugins/file1/ --registry=https://npm.pkg.github.com/Kubernetes-administration

  #       - name: Publish file 2
  #         run: npm publish plugins/file2/ --registry=https://npm.pkg.github.com/Kubernetes-administration

  #       - name: Publish file 3
  #         run: npm publish plugins/file3/ --registry=https://npm.pkg.github.com/Kubernetes-administration

  #       - name: Publish file 4
  #         run: npm publish plugins/file4/ --registry=https://npm.pkg.github.com/Kubernetes-administration